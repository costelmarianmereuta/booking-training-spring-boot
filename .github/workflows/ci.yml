name: CI (split stages)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '21'

jobs:
  build:
    name: Build (no tests)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Build package (skip tests)
        run: mvn -B -DskipTests -DskipITs clean package
      - name: Upload app artifact (JAR)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: "**/target/*.jar"

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      # run only unit tests
      - name: Run unit tests
        run: mvn -B -DskipITs=true test
      - name: Generate coverage report (JaCoCo)
        run: mvn -B jacoco:report
      - name: Upload unit test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: |
            **/target/surefire-reports/**
            **/target/site/jacoco/**

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      # (opțional) servicii pentru IT (ex: PostgreSQL) — decomentează dacă ai nevoie
      # services:
      #   postgres:
      #     image: postgres:16
      #     env:
      #       POSTGRES_USER: test
      #       POSTGRES_PASSWORD: test
      #       POSTGRES_DB: testdb
      #     ports: ['5432:5432']
      #     options: >-
      #       --health-cmd="pg_isready -U test"
      #       --health-interval=10s
      #       --health-timeout=5s
      #       --health-retries=5

      # Rulează DOAR integration tests (Failsafe)
      # verify va rula: pre-integration-test, integration-test, post-integration-test, failsafe:verify
      - name: Run integration tests (Failsafe)
        run: mvn -B -DskipTests=true -DskipITs=false verify

      - name: Upload integration test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: |
            **/target/failsafe-reports/**

  owasp-dep-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    continue-on-error: true   # doesn't block the ci if NVD fails
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Cache OWASP data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: owasp-dc-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            owasp-dc-${{ runner.os }}-


      - name: Warm NVD cache (updateonly)
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          for i in 1 2 3; do
            echo "NVD update attempt $i..."
            mvn -B -Dnvd.api.key="$NVD_API_KEY" \
                -Dnvd.api.delay=6000 \
                -Ddata.directory="$HOME/.m2/repository/org/owasp/dependency-check-data" \
                org.owasp:dependency-check-maven:updateonly && break || sleep 10
          done

      - name: Run Dependency-Check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: >
          mvn -B
          -Dnvd.api.key="$NVD_API_KEY"
          -Dnvd.api.delay=6000
          -Ddata.directory="$HOME/.m2/repository/org/owasp/dependency-check-data"
          -DfailOnError=false
          org.owasp:dependency-check-maven:check

      - name: Upload OWASP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: "**/dependency-check-report.html"

  sonar-quality:
    name: SonarCloud Quality Analysis
    runs-on: ubuntu-latest
    needs: [ integration-tests ]   # start after Integration tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # 1️⃣ Rulează testele și generează raportul JaCoCo
      - name: Run tests & generate coverage report
        run: mvn -B clean verify jacoco:report

      # 2️⃣ Rulează analiza SonarCloud
      - name: SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B sonar:sonar -Dsonar.login=$SONAR_TOKEN

